// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TouchGanttChart.Data;

#nullable disable

namespace TouchGanttChart.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250907185932_AddCompletionDateColumn")]
    partial class AddCompletionDateColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("TaskDependencies", b =>
                {
                    b.Property<int>("DependentTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrerequisiteTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DependentTaskId", "PrerequisiteTaskId");

                    b.HasIndex("PrerequisiteTaskId");

                    b.ToTable("TaskDependencies");
                });

            modelBuilder.Entity("TouchGanttChart.Models.GanttTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ActualHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("REAL");

                    b.Property<string>("Assignee")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("General");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Assignee");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("Name");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("Priority");

                    b.HasIndex("Progress");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TouchGanttChart.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Budget")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("#3498db");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectManager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsArchived");

                    b.HasIndex("Name");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TouchGanttChart.Models.ProjectTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EstimatedBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("EstimatedDurationDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("📋");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBuiltIn")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsBuiltIn");

                    b.HasIndex("Name");

                    b.ToTable("ProjectTemplates");
                });

            modelBuilder.Entity("TouchGanttChart.Models.TaskTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultAssigneeRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EstimatedDurationDays")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("EstimatedHours")
                        .HasPrecision(8, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCriticalPath")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMilestone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentTaskTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartOffsetDays")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsCriticalPath");

                    b.HasIndex("IsMilestone");

                    b.HasIndex("Order");

                    b.HasIndex("ParentTaskTemplateId");

                    b.HasIndex("ProjectTemplateId");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("TouchGanttChart.Models.TaskTemplateDependency", b =>
                {
                    b.Property<int>("DependentTaskTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrerequisiteTaskTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DependencyType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LagDays")
                        .HasColumnType("INTEGER");

                    b.HasKey("DependentTaskTemplateId", "PrerequisiteTaskTemplateId");

                    b.HasIndex("DependentTaskTemplateId");

                    b.HasIndex("PrerequisiteTaskTemplateId");

                    b.ToTable("TaskTemplateDependency");
                });

            modelBuilder.Entity("TaskDependencies", b =>
                {
                    b.HasOne("TouchGanttChart.Models.GanttTask", null)
                        .WithMany()
                        .HasForeignKey("DependentTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouchGanttChart.Models.GanttTask", null)
                        .WithMany()
                        .HasForeignKey("PrerequisiteTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TouchGanttChart.Models.GanttTask", b =>
                {
                    b.HasOne("TouchGanttChart.Models.GanttTask", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TouchGanttChart.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentTask");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TouchGanttChart.Models.TaskTemplate", b =>
                {
                    b.HasOne("TouchGanttChart.Models.TaskTemplate", "ParentTaskTemplate")
                        .WithMany("ChildTaskTemplates")
                        .HasForeignKey("ParentTaskTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TouchGanttChart.Models.ProjectTemplate", "ProjectTemplate")
                        .WithMany("TaskTemplates")
                        .HasForeignKey("ProjectTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentTaskTemplate");

                    b.Navigation("ProjectTemplate");
                });

            modelBuilder.Entity("TouchGanttChart.Models.TaskTemplateDependency", b =>
                {
                    b.HasOne("TouchGanttChart.Models.TaskTemplate", "DependentTaskTemplate")
                        .WithMany("Dependencies")
                        .HasForeignKey("DependentTaskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouchGanttChart.Models.TaskTemplate", "PrerequisiteTaskTemplate")
                        .WithMany("Dependents")
                        .HasForeignKey("PrerequisiteTaskTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DependentTaskTemplate");

                    b.Navigation("PrerequisiteTaskTemplate");
                });

            modelBuilder.Entity("TouchGanttChart.Models.GanttTask", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("TouchGanttChart.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TouchGanttChart.Models.ProjectTemplate", b =>
                {
                    b.Navigation("TaskTemplates");
                });

            modelBuilder.Entity("TouchGanttChart.Models.TaskTemplate", b =>
                {
                    b.Navigation("ChildTaskTemplates");

                    b.Navigation("Dependencies");

                    b.Navigation("Dependents");
                });
#pragma warning restore 612, 618
        }
    }
}
